import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpHead;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class BrokenLinksChecker {

    public static void main(String[] args) {
        // Set the path to your ChromeDriver executable
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");

        WebDriver driver = new ChromeDriver();
        driver.get("http://example.com");  // Replace with the target URL

        List<WebElement> links = driver.findElements(By.tagName("a"));
        List<String> brokenLinks = checkBrokenLinks(links);

        driver.quit();

        if (!brokenLinks.isEmpty()) {
            System.out.println("Broken links found:");
            for (String link : brokenLinks) {
                System.out.println(link);
            }
        } else {
            System.out.println("No broken links found.");
        }
    }

    private static List<String> checkBrokenLinks(List<WebElement> links) {
        List<String> brokenLinks = new ArrayList<>();
        ExecutorService executorService = Executors.newFixedThreadPool(10);
        List<Future<String>> futures = new ArrayList<>();

        for (WebElement link : links) {
            String url = link.getAttribute("href");
            if (url != null) {
                futures.add(executorService.submit(new LinkChecker(url)));
            }
        }

        for (Future<String> future : futures) {
            try {
                String brokenLink = future.get();
                if (brokenLink != null) {
                    brokenLinks.add(brokenLink);
                }
            } catch (InterruptedException | ExecutionException e) {
                e.printStackTrace();
            }
        }

        executorService.shutdown();
        try {
            if (!executorService.awaitTermination(1, TimeUnit.MINUTES)) {
                executorService.shutdownNow();
            }
        } catch (InterruptedException e) {
            executorService.shutdownNow();
        }

        return brokenLinks;
    }

    static class LinkChecker implements Callable<String> {
        private final String url;

        LinkChecker(String url) {
            this.url = url;
        }

        @Override
        public String call() {
            try (CloseableHttpClient client = HttpClients.createDefault()) {
                HttpHead request = new HttpHead(url);
                HttpResponse response = client.execute(request);
                int statusCode = response.getStatusLine().getStatusCode();
                if (statusCode >= 400) {
                    return url;
                }
            } catch (IOException e) {
                return url;
            }
            return null;
        }
    }
}
