import javax.sound.sampled.*;
import java.io.File;
import java.io.IOException;

public class VoiceQualityAssessment {

    private static final double SNR_THRESHOLD = 15; // SNR threshold for good quality
    private static final double VOLUME_THRESHOLD = 0.05; // Volume threshold for voice activity

    public static void main(String[] args) {
        String filePath = "path_to_your_audio_file.wav"; // Change this to your file path
        File audioFile = new File(filePath);
        
        try {
            AudioInputStream stream = AudioSystem.getAudioInputStream(audioFile);
            AudioFormat format = stream.getFormat();
            double[] samples = extractSamples(stream, format);

            boolean[] voiceActive = detectVoice(samples);
            double snr = calculateSNR(samples, voiceActive);
            
            if (snr > SNR_THRESHOLD) {
                System.out.println("Audio Quality: Good");
            } else {
                System.out.println("Audio Quality: Not Good");
            }
        } catch (UnsupportedAudioFileException | IOException e) {
            e.printStackTrace();
        }
    }

    private static double[] extractSamples(AudioInputStream stream, AudioFormat format) throws IOException {
        byte[] audioBytes = stream.readAllBytes();
        double[] samples = new double[audioBytes.length / 2];

        for (int i = 0, sampleIndex = 0; i < audioBytes.length; sampleIndex++, i += 2) {
            int sample = (audioBytes[i] & 0xFF) | (audioBytes[i + 1] << 8);
            samples[sampleIndex] = sample / 32768.0; // Normalize to range [-1,1] for 16-bit audio
        }
        return samples;
    }

    private static boolean[] detectVoice(double[] samples) {
        boolean[] voiceActive = new boolean[samples.length];
        for (int i = 0; i < samples.length; i++) {
            voiceActive[i] = Math.abs(samples[i]) > VOLUME_THRESHOLD;
        }
        return voiceActive;
    }

    private static double calculateSNR(double[] samples, boolean[] voiceActive) {
        double signalPower = 0, noisePower = 0;
        int signalCount = 0, noiseCount = 0;

        for (int i = 0; i < samples.length; i++) {
            if (voiceActive[i]) {
                signalPower += samples[i] * samples[i];
                signalCount++;
            } else {
                noisePower += samples[i] * samples[i];
                noiseCount++;
            }
        }

        double avgSignalPower = signalCount > 0 ? signalPower / signalCount : 0;
        double avgNoisePower = noiseCount > 0 ? noisePower / noiseCount : 0;

        return 10 * Math.log10(avgSignalPower / avgNoisePower);
    }
}
