import javax.sound.sampled.*;

public class AudioAnalyzer {

    private static final int SAMPLE_RATE = 44100;  // Standard sample rate for CD audio

    public void analyzeAudio(String filePath) {
        try {
            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File(filePath));
            AudioFormat format = audioInputStream.getFormat();
            byte[] audioBytes = audioInputStream.readAllBytes();
            double[] audioData = convertToDoubleArray(audioBytes, format);

            detectGlitches(audioData);
            detectEcho(audioData);

        } catch (UnsupportedAudioFileException | IOException e) {
            e.printStackTrace();
        }
    }

    private double[] convertToDoubleArray(byte[] audioBytes, AudioFormat format) {
        double[] audioData = new double[audioBytes.length / 2];
        boolean isBigEndian = format.isBigEndian();

        for (int i = 0, sampleIndex = 0; i < audioBytes.length; sampleIndex++, i += 2) {
            int value = (isBigEndian) ?
                ((audioBytes[i] & 0xFF) << 8 | (audioBytes[i + 1] & 0xFF)) :
                ((audioBytes[i + 1] & 0xFF) << 8 | (audioBytes[i] & 0xFF));
            audioData[sampleIndex] = value / 32768.0;  // Normalize to range [-1,1] for 16-bit audio
        }
        return audioData;
    }

    private void detectGlitches(double[] audioData) {
        double lastSample = 0;
        double threshold = 0.2; // This threshold might need tuning based on your audio data

        for (int i = 1; i < audioData.length; i++) {
            double delta = Math.abs(audioData[i] - lastSample);
            if (delta > threshold) {
                System.out.println("Glitch detected at sample " + i + ", time " + i / (double)SAMPLE_RATE + "s");
            }
            lastSample = audioData[i];
        }
    }

    private void detectEcho(double[] audioData) {
        int maxLag = SAMPLE_RATE / 2; // Searching for echo up to 0.5 seconds
        double[] autocorrelation = new double[maxLag];

        for (int lag = 0; lag < maxLag; lag++) {
            double sum = 0;
            for (int i = lag; i < audioData.length; i++) {
                sum += audioData[i] * audioData[i - lag];
            }
            autocorrelation[lag] = sum / (audioData.length - lag);
        }

        for (int lag = 1; lag < maxLag; lag++) {
            if (autocorrelation[lag] > 0.5 * autocorrelation[0]) {
                System.out.println("Echo detected at delay of " + lag + " samples (" + (lag / (double)SAMPLE_RATE) + "s).");
            }
        }
    }

    public static void main(String[] args) {
        AudioAnalyzer analyzer = new AudioAnalyzer();
        analyzer.analyzeAudio("path/to/your/audiofile.wav");
    }
}
