import sys
import json
from vosk import Model, KaldiRecognizer
import wave
import os
import re

def transcribe_numbers(model_path, audio_file):
    # Ensure model and audio file paths are valid
    if not os.path.exists(model_path):
        print("Model path does not exist. Please check the path and try again.")
        sys.exit(1)
    if not os.path.exists(audio_file):
        print("Audio file does not exist. Please check the path and try again.")
        sys.exit(1)

    try:
        model = Model(model_path)
        wf = wave.open(audio_file, "rb")
    except FileNotFoundError:
        print("File not found. Please check the file path.")
        sys.exit(1)
    except Exception as e:
        print(f"An error occurred: {e}")
        sys.exit(1)

    # Prepare recognizer with the audio file sample rate
    rec = KaldiRecognizer(model, wf.getframerate())

    results = []
    while True:
        data = wf.readframes(4000)
        if len(data) == 0:
            break
        if rec.AcceptWaveform(data):
            results.append(rec.Result())

    results.append(rec.FinalResult())
    transcription = " ".join([json.loads(result)['text'] for result in results if 'text' in json.loads(result)])

    # Filter out only numeric-related words or actual digits from the transcription
    numbers_transcribed = re.findall(r'\b(zero|one|two|three|four|five|six|seven|eight|nine|ten|\d+)\b', transcription, re.IGNORECASE)
    return ' '.join(numbers_transcribed)

if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("Usage: python transcribe_numbers.py <model_path> <audio_file>")
        sys.exit(1)

    model_path = sys.argv[1]
    audio_file = sys.argv[2]
    result = transcribe_numbers(model_path, audio_file)
    print("Transcribed Numbers:", result)
