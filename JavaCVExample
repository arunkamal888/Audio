import javax.sound.sampled.*;
import java.io.File;
import java.io.IOException;
import com.googlecode.soundlibs.mp3spi.Mp3AudioFileReader;
import com.googlecode.soundlibs.mp3spi.Mp3AudioFileReader.Mp3AudioInputStream;

public class MP3AudioActivityChecker {
    private static final double AUDIO_THRESHOLD = 0.01; // Adjust based on expected signal levels

    public static void main(String[] args) {
        try {
            File mp3File = new File("audiofile.mp3");

            // Read MP3 file
            AudioInputStream audioStream = getAudioInputStream(mp3File);
            AudioFormat format = audioStream.getFormat();
            byte[] audioData = audioStream.readAllBytes();
            
            double[] samples = extractSamples(audioData, format);
            boolean isAudioPresent = detectAudio(samples);
            
            if (isAudioPresent) {
                System.out.println("Audio is present.");
            } else {
                System.out.println("No audio detected.");
            }
            
            audioStream.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private static AudioInputStream getAudioInputStream(File mp3File) throws UnsupportedAudioFileException, IOException {
        Mp3AudioFileReader mp3Reader = new Mp3AudioFileReader();
        Mp3AudioInputStream mp3AudioStream = (Mp3AudioInputStream) mp3Reader.getAudioInputStream(mp3File);
        return mp3AudioStream;
    }

    private static double[] extractSamples(byte[] audioData, AudioFormat format) {
        int bytesPerSample = format.getFrameSize() / format.getChannels();
        int numSamples = audioData.length / bytesPerSample;
        double[] samples = new double[numSamples];
        
        for (int i = 0; i < numSamples; i++) {
            int sampleValue = 0;
            for (int j = 0; j < bytesPerSample; j++) {
                sampleValue |= (audioData[i * bytesPerSample + j] & 0xFF) << (j * 8);
            }
            samples[i] = sampleValue / (double) Math.pow(2, 8 * bytesPerSample - 1);
        }
        
        return samples;
    }

    private static boolean detectAudio(double[] samples) {
        for (double sample : samples) {
            if (Math.abs(sample) > AUDIO_THRESHOLD) {
                return true; // Audio detected
            }
        }
        return false; // No significant audio detected
    }
}
