package your.package.name;

import cucumber.api.CucumberOptions;
import cucumber.api.junit.Cucumber;
import org.junit.runner.JUnitCore;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Suite;
import org.junit.runners.model.InitializationError;
import org.junit.runners.model.RunnerBuilder;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

@RunWith(Suite.class)
@Suite.SuiteClasses({ParallelCucumberTest.ParallelRunner.class})
public class ParallelCucumberTest {

    @CucumberOptions(
            features = "src/test/resources/features",
            glue = "your.package.name.steps",
            plugin = {"pretty", "html:target/cucumber-parallel"},
            monochrome = true
    )
    public static class ParallelRunner extends Suite {

        private static final int THREAD_COUNT = 4; // Set your desired number of threads here

        public ParallelRunner(Class<?> klass, RunnerBuilder builder) throws InitializationError {
            super(klass, builder);
        }

        @Override
        protected List<org.junit.runner.Runner> getChildren() {
            List<org.junit.runner.Runner> children = super.getChildren();
            return runParallel(children, THREAD_COUNT);
        }

        private List<org.junit.runner.Runner> runParallel(List<org.junit.runner.Runner> children, int threadCount) {
            ExecutorService executorService = Executors.newFixedThreadPool(threadCount);
            List<org.junit.runner.Runner> parallelizedChildren = new ArrayList<>(children);

            for (org.junit.runner.Runner child : children) {
                executorService.submit(() -> {
                    try {
                        child.run(new org.junit.runner.notification.RunNotifier());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                    }
                });
            }

            executorService.shutdown();
            try {
                executorService.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }

            return parallelizedChildren;
        }
    }

    public static void main(String[] args) {
        JUnitCore.main("your.package.name.ParallelCucumberTest");
    }
}
