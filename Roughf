package your.package.name;

import cucumber.api.CucumberOptions;
import cucumber.api.junit.Cucumber;
import org.junit.runner.JUnitCore;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Suite;
import org.junit.runners.model.InitializationError;

import java.util.ArrayList;
import java.util.List;

@RunWith(Suite.class)
@Suite.SuiteClasses({ParallelCucumberTest.ParallelRunner.class})
public class ParallelCucumberTest {

    @CucumberOptions(
            features = "src/test/resources/features",
            glue = "your.package.name.steps",
            plugin = {"pretty", "html:target/cucumber-parallel"},
            monochrome = true
    )
    public static class ParallelRunner extends Suite {

        public ParallelRunner(Class<?> klass, org.junit.runners.model.RunnerBuilder builder) throws InitializationError {
            super(klass, builder);
        }

        @Override
        protected List<org.junit.runner.Runner> getChildren() {
            List<org.junit.runner.Runner> children = super.getChildren();
            List<org.junit.runner.Runner> parallelizedChildren = new ArrayList<>();
            for (org.junit.runner.Runner child : children) {
                parallelizedChildren.add(new ParallelRunner(child.getDescription().getTestClass(), new org.junit.runners.model.RunnerBuilder() {
                    @Override
                    public org.junit.runner.Runner runnerForClass(Class<?> testClass) throws Throwable {
                        return child;
                    }
                }));
            }
            return parallelizedChildren;
        }
    }

    public static void main(String[] args) {
        JUnitCore.main("your.package.name.ParallelCucumberTest");
    }
}
