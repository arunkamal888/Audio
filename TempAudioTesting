def plot_waveform(data, sample_rate, duration, channels, rms, silence, snr, quality_percentage, output_file):
    """Plot the audio waveform with analysis information and save as PNG."""
    time = np.linspace(0., duration, num=len(data))
    
    plt.figure(figsize=(12, 6))
    
    # Create subplots: 80% for waveform, 20% for details
    ax1 = plt.subplot2grid((5, 1), (0, 0), rowspan=4)  # Larger section for waveform
    ax2 = plt.subplot2grid((5, 1), (4, 0))  # Smaller section for details

    # Plot the waveform
    ax1.plot(time, data, label='Waveform', color='blue')
    ax1.set_title('Audio Waveform')
    ax1.set_xlabel('Time [s]')
    ax1.set_ylabel('Amplitude')
    ax1.axhline(0, color='grey', linestyle='--')  # Zero amplitude line
    ax1.grid()

    # Details for the second axis (below the waveform)
    details = [
        f'Duration: {duration:.2f} seconds',
        f'Channels: {channels}',
        f'RMS: {rms:.5f}',
        f'Silence Detected: {"Yes" if silence else "No"}',
        f'SNR: {snr:.2f} dB',
        f'Quality Percentage: {quality_percentage:.2f}%',
        f'Overall Quality: {"Good" if quality_percentage >= 75 else "Not Good"}'
    ]
    
    # Use a bounding box around the text and bold the keys
    textstr = '\n'.join([
        r'$\bf{Duration:}$' + f' {duration:.2f} seconds',
        r'$\bf{Channels:}$' + f' {channels}',
        r'$\bf{RMS:}$' + f' {rms:.5f}',
        r'$\bf{Silence\ Detected:}$' + f' {"Yes" if silence else "No"}',
        r'$\bf{SNR:}$' + f' {snr:.2f} dB',
        r'$\bf{Quality\ Percentage:}$' + f' {quality_percentage:.2f}%',
        r'$\bf{Overall\ Quality:}$' + f' {"Good" if quality_percentage >= 75 else "Not Good"}'
    ])

    # Adding the text with a bounding box and adjusting the position slightly
    ax2.text(
        0.05, 0.4, textstr, fontsize=9, verticalalignment='center', horizontalalignment='left',
        bbox=dict(facecolor='white', alpha=0.7, edgecolor='black')
    )

    # Hide the x and y ticks in the details box
    ax2.set_axis_off()

    # Add some padding to the layout to ensure nothing gets cut off
    plt.tight_layout(pad=2)

    # Save the figure as a PNG file
    plt.savefig(output_file)
    plt.close()  # Close the figure to free up memory
