import org.bytedeco.ffmpeg.global.avcodec;
import org.bytedeco.ffmpeg.global.avformat;
import org.bytedeco.ffmpeg.global.avutil;
import org.bytedeco.ffmpeg.avformat.AVFormatContext;
import org.bytedeco.ffmpeg.avcodec.AVCodecContext;
import org.bytedeco.ffmpeg.avcodec.AVPacket;
import org.bytedeco.ffmpeg.avcodec.AVFrame;
import org.bytedeco.ffmpeg.avutil.AVDictionary;
import org.bytedeco.ffmpeg.avutil.AVFrame;
import org.bytedeco.ffmpeg.avcodec.AVCodec;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

public class MP4ToWAVConverterJavaCV {

    public static void main(String[] args) {
        String mp4FilePath = "path/to/your/inputfile.mp4";
        String wavFilePath = "path/to/your/outputfile.wav";
        convertMP4ToWAV(mp4FilePath, wavFilePath);
    }

    public static void convertMP4ToWAV(String inputFilePath, String outputFilePath) {
        avformat.av_register_all(); // Initialize FFmpeg libraries

        AVFormatContext formatContext = avformat.avformat_alloc_context();
        if (avformat.avformat_open_input(formatContext, inputFilePath, null, null) < 0) {
            System.err.println("Could not open input file.");
            return;
        }

        if (avformat.avformat_find_stream_info(formatContext, (AVDictionary) null) < 0) {
            System.err.println("Could not find stream information.");
            return;
        }

        int audioStreamIndex = -1;
        for (int i = 0; i < formatContext.nb_streams(); i++) {
            if (formatContext.streams(i).codecpar().codec_type() == avcodec.AVMEDIA_TYPE_AUDIO) {
                audioStreamIndex = i;
                break;
            }
        }

        if (audioStreamIndex == -1) {
            System.err.println("Could not find audio stream.");
            return;
        }

        AVCodecContext codecContext = avcodec.avcodec_alloc_context3(null);
        avcodec.avcodec_parameters_to_context(codecContext, formatContext.streams(audioStreamIndex).codecpar());

        AVCodec codec = avcodec.avcodec_find_decoder(codecContext.codec_id());
        if (codec == null) {
            System.err.println("Codec not found.");
            return;
        }

        if (avcodec.avcodec_open2(codecContext, codec, (AVDictionary) null) < 0) {
            System.err.println("Could not open codec.");
            return;
        }

        File outputFile = new File(outputFilePath);
        try (OutputStream outputStream = new FileOutputStream(outputFile)) {
            AVPacket packet = new AVPacket();
            AVFrame frame = avutil.av_frame_alloc();

            while (avformat.av_read_frame(formatContext, packet) >= 0) {
                if (packet.stream_index() == audioStreamIndex) {
                    avcodec.avcodec_send_packet(codecContext, packet);
                    while (avcodec.avcodec_receive_frame(codecContext, frame) == 0) {
                        // Write WAV header and audio samples to the output file
                        // Writing WAV header should be done at the beginning, and data is written as PCM bytes
                        // This example writes raw PCM data without header for simplicity
                        outputStream.write(frame.data().getStringBytes());
                    }
                }
                avcodec.av_packet_unref(packet);
            }

            avcodec.av_frame_free(frame);
        } catch (IOException e) {
            e.printStackTrace();
        }

        avcodec.avcodec_close(codecContext);
        avformat.avformat_close_input(formatContext);

        System.out.println("Conversion completed.");
    }
}
